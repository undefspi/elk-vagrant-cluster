---
- hosts: all
  become: true
  tags: [ kibana, logstash, elastic, filebeats ]
  tasks:
    - name: Install Vim, because plain Vi is driving me crazy
      yum: name=vim state=latest

    - name: Install cURL for testing
      yum: name=curl state=latest

    - name: Install NTP to avoid time drift inside the VM
      yum: name={{ item }} state=latest
      loop:
        - ntp
        - ntpdate
    
    - name: Get rpm public signing
      shell: rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch

    - name: Add Elastic Repo
      template:
        src: templates/logstash/elastic.repos.j2
        dest: /etc/yum.repos.d/elastic.repo
        owner: root
        group: root
        mode: 0600
   

- hosts: es-master-nodes, es-data-nodes
  become: true
  roles:
    - role: elastic.elasticsearch
  tags: [ elastic ]

- hosts: logstash-nodes
  become: true
  tags: [ logstash ]

  tasks:
  - name: Install java jdk
    yum:
      name: java-11-openjdk
      state: present

  - name: Install Logstash
    yum: 
      name: logstash-{{ elastic_version }}
      state: present

  - name: Make sure Logstash autostarts, but is stopped until it is properly configured
    service: name=logstash enabled=yes state=stopped

- hosts: logstash-nodes
  become: true
  roles:
    - role: suzuki-shunsuke.docker_ce_centos
  tags: [ logstash-docker ]

  tasks:
  - name: Get the platform (i386 or amd64) of the virtual machine
    command: arch
    register: print_architecture

  - name: And set the actual platform value as a variable
    set_fact:
      platform: "{{ print_architecture.stdout }}"

 

  # - name: install epel
  #   become: true
  #   yum: 
  #     name: epel-release

  # - name: install pip docker-py
  #   become: true
  #   pip:
  #     name: docker-py

  # - name: Get Logstash Docker Image
  #   docker_container:
  #     name: logstash
  #     image: docker.elastic.co/logstash/logstash:7.1.1
  #     state: started
  #     restart_policy: always
  #     published_ports:
  #       - 9600:9600
  #       - 5044:5044
  #     volumes:
  #       - /elastic/elastic-stack/templates/logstash/pipeline/:/usr/share/logstash/pipeline/
  #       - /elastic/elastic-stack/templates/logstash/settings/logstash.yml:/usr/share/logstash/config/logstash.yml

  # - name: Install unzip for unpacking files later on
  #   apt: name=unzip state=latest



  # - name: Install pip to get current Python dependencies
  #   apt: name=python-pip state=latest

  # - name: Install Docker
  #   apt: name=docker.io state=latest
  #   when: "platform == 'amd64'"

  # - name: Make sure Docker autostarts and is started
  #   service: name=docker enabled=yes state=started
  #   when: "platform == 'amd64'"

  # - name: Install Docker for Python to handle Docker from Ansible
  #   pip: name=docker state=latest
  #   when: "platform == 'amd64'"


  # - name: Get a Redis container on 64bit
  #   docker_container:
  #     name: myredis
  #     image: redis
  #     command: redis-server --appendonly yes
  #     state: started
  #     restart_policy: always
  #     published_ports:
  #       - 0.0.0.0:6379:6379
  #     volumes:
  #       - /data
  #     log_driver: json-file
  #   when: "platform == 'amd64'"

  # - name: Install Redis as a service on 32bit
  #   apt: name=redis-server state=latest
  #   when: "platform == 'i386'"

  # - name: Make sure Redis autostarts and is started on 32bit
  #   service: name=redis-server enabled=yes state=started
  #   when: "platform == 'i386'"


  # - name: Install Redis CLI, nginx, and MongoDB so we have services in action
  #   apt: name={{ item }} state=latest
  #   loop:
  #     - redis-tools
  #     - nginx
  #     - mongodb

  # - name: Change the nginx configuration to expose /server-status, which Metricbeat nginx uses
  #   template: src=templates/nginx/nginx-sites dest=/etc/nginx/sites-enabled/default

  # - name: Enable the default HTML site of nginx
  #   command: cp /var/www/html/index.nginx-debian.html /var/www/html/index.html

  # - name: Make sure nginx and MongoDB autostart and are started
  #   service: name={{ item }} enabled=yes state=started
  #   loop:
  #     - nginx
  #     - mongodb

  # - name: Reload the nginx configuration so that our change is applied
  #   service: name=nginx state=reloaded


  # - name: Add osquery's repository key
  #   apt_key:
  #     keyserver: keyserver.ubuntu.com
  #     id: 1484120AC4E9F8A1A577AEEE97A80C63C9D8B80B
  #     state: present

  # - name: Add osquery's server repository
  #   apt_repository:
  #     repo: "deb [arch=amd64] https://osquery-packages.s3.amazonaws.com/deb deb main"
  #     state: present

  # - name: Install osquery
  #   apt: name=osquery update_cache=true

  # - name: Stop osquery since it sometimes need a few seconds between stop and start to work properly
  #   service: name=osqueryd state=stopped

  # - name: Allow osquery to access the rsyslog.conf
  #   blockinfile:
  #     path: /etc/rsyslog.conf
  #     block: |
  #       template(
  #         name="OsqueryCsvFormat"
  #         type="string"
  #         string="%timestamp:::date-rfc3339,csv%,%hostname:::csv%,%syslogseverity:::csv%,%syslogfacility-text:::csv%,%syslogtag:::csv%,%msg:::csv%\n"
  #       )
  #       *.* action(type="ompipe" Pipe="/var/osquery/syslog_pipe" template="OsqueryCsvFormat")

  # - name: Restart rsyslog
  #   service: name=rsyslog state=restarted

  # - name: Provide the base configuration for osquery
  #   template: src=templates/osquery/osquery.conf dest=/etc/osquery/osquery.conf

  # - name: Change the interval of the osquery queries to 5min so we can see results quicker
  #   replace:
  #     path: "/usr/share/osquery/packs/{{ item }}.conf"
  #     regexp: '"interval" : .*'
  #     replace: '"interval" : "300",'
  #   loop:
  #     - osquery-monitoring
  #     - incident-response
  #     - it-compliance
  #     - vuln-management

  # - name: Restart osquery and make sure it autostarts
  #   service: name=osqueryd state=restarted enabled=yes


  # - name: Get Elasticsearch
  #   get_url:
  #     url={{ elastic_download }}/downloads/elasticsearch/elasticsearch-{{ elastic_version }}-{{ platform }}.deb
  #     dest=/opt/elasticsearch.deb

  # - name: Install Elasticsearch
  #   apt: deb=/opt/elasticsearch.deb

  # - name: Make sure Elasticsearch autostarts, but is stopped until it is properly configured
  #   service: name=elasticsearch enabled=yes state=stopped





  # - name: Get the Beats
  #   get_url:
  #     url={{ elastic_download }}/downloads/beats/{{ item }}/{{ item }}-{{ elastic_version }}-{{ platform }}.deb
  #     dest=/opt/{{ item }}.deb
  #   loop:
  #     - auditbeat
  #     - filebeat
  #     - heartbeat
  #     - metricbeat
  #     - packetbeat


  # - name: Install the Beats
  #   apt: deb=/opt/{{ item }}.deb
  #   loop:
  #     - auditbeat
  #     - filebeat
  #     - heartbeat
  #     - metricbeat
  #     - packetbeat

  # - name: Make sure the Beats autostart, but are stopped until they are properly configured
  #   service: name={{ item }} enabled=yes state=stopped
  #   loop:
  #     - auditbeat
  #     - filebeat
  #     - heartbeat-elastic
  #     - metricbeat
  #     - packetbeat


  # - name: Get Kibana
  #   get_url:
  #     url={{ elastic_download }}/downloads/kibana/kibana-{{ elastic_version }}-{{ platform }}.deb
  #     dest=/opt/kibana.deb

  # - name: Install Kibana
  #   apt: deb=/opt/kibana.deb

  # - name: Make sure Kibana autostarts, but is stopped until it is properly configured
  #   service: name=kibana enabled=yes state=stopped


  # - name: Download the ingest-geoip plugin
  #   get_url:
  #     url={{ elastic_download }}/downloads/elasticsearch-plugins/ingest-geoip/ingest-geoip-{{ elastic_version }}.zip
  #     dest=/opt/ingest-geoip.zip

  # - name: Download the ingest-user-agent plugin
  #   get_url:
  #     url={{ elastic_download }}/downloads/elasticsearch-plugins/ingest-user-agent/ingest-user-agent-{{ elastic_version }}.zip
  #     dest=/opt/ingest-user-agent.zip


  # - name: Make the shell scripts executable
  #   file: path=/elastic-stack/{{ item }} mode=0755
  #   loop:
  #     - all.sh
  #     - fix-time.sh


  # - name: Get the injector plugin to generate test data
  #   get_url:
  #     url=https://download.elastic.co/workshops/basic-kibana/injector/injector-{{ injector_version }}.jar
  #     dest=/opt/injector.jar
  #     mode=0755

- hosts: kibana-nodes
  become: true
  tags: [ kibana ]
  tasks:
    - name: Install java jdk
      yum:
        name: java-11-openjdk
        state: present

    - name: Install kibana
      yum: 
        name: kibana-{{ elastic_version }}
        state: present

    - name: Make sure kibana autostarts, but is stopped until it is properly configured
      service: name=kibana enabled=yes state=stopped

- hosts: filebeat-nodes
  become: true
  tags: [ filebeats ]

  tasks:
     - name: Install filebeat
       yum: 
        name: filebeat-{{ elastic_version }}
        state: present

     - name: Make sure kibana autostarts, but is stopped until it is properly configured
       service: name=filebeat enabled=yes state=stopped
   
- import_playbook: 3_configure-logstash.yml
  tags: [ configure ]

- import_playbook: 2_configure-kibana.yml
  tags: [ configure ]
